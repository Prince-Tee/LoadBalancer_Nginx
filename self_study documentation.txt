Load Balancer Solution With Nginx and SSL/TLS


Rename apache web browser to Nginx LB on aws

ssh into it from gitbash

To uninstall Apache from an existing Load Balancer server, follow these steps:

To uninstall Apache from an existing Load Balancer server, follow these steps:

### For Ubuntu/systems:

1. **SSH into the Load Balancer server:**
   Open a terminal and use SSH to connect to your server.
   ```bash
   ssh username@your-server-ip
   ```

2. **Stop the Apache service:**
   First, stop the Apache service to ensure no issues during uninstallation.
   ```bash
   sudo systemctl stop apache2
   ```

3. **Uninstall Apache:**
   Remove the Apache package.
   ```bash
   sudo apt-get purge apache2 apache2-utils apache2-bin apache2.2-common
   ```

4. **Remove unused dependencies:**
   Clean up any dependencies that are no longer needed.
   ```bash
   sudo apt-get autoremove
   ```

5. **Check for Apache files:**
   To ensure that no residual Apache files are left, check the directories where Apache configuration files are typically stored.
   ```bash
   sudo rm -rf /etc/apache2
   sudo rm -rf /var/www/html
   ```

6. **Verify Apache removal:**
   Check that Apache has been completely removed.
   ```bash
   apache2 -v
   ```
   If Apache is fully removed, you should see an error or "command not found."


 open TCP port 80 for HTTP connections, also open TCP port 443 - this port is used for secured HTTPS connections)


Open the /etc/hosts file: Use a text editor like nano or vi to open the /etc/hosts file for editing. You need root privileges to modify this file.

```bash
sudo vi /etc/hosts
```

Add entries for Web1 and Web2: In the /etc/hosts file, add the local IP addresses of your web servers and their corresponding names. The format is:

```plaintext

<IP_address>   <hostname>
```

Install and configure Nginx as a load balancer to point traffic to the resolvable DNS names of the webservers
Update the instance and Install Nginx Install Nginx

```bash
sudo apt update
sudo apt install nginx
```

Open the default nginx configuration file

```bash
sudo vi /etc/nginx/nginx.conf
```

#insert following configuration into http section
```
 upstream myproject {
    server Web1 weight=5;
    server Web2 weight=5;
  }

server {
    listen 80;
    server_name www.domain.com;
    location / {
      proxy_pass http://myproject;
    }
  }
```

and comment out this line comment out this line
```
#       include /etc/nginx/sites-enabled/*;
```

Restart Nginx and make sure the service is up and running

```
sudo systemctl restart nginx
sudo systemctl status nginx
```

In order to get a valid SSL certificate - you need to register a new domain name, you can use a subdomain from FreeDNS (freedns.afraid.org) to complete your task. Here's how you can proceed:

Steps to Use a FreeDNS Subdomain with Nginx and SSL:
Register and Get a Free Subdomain:

Go to FreeDNS.
create an account or log in.
Navigate to Subdomains and select a free subdomain that is available.
You will be able to choose from a list of shared domains (e.g., example.mooo.com).



You might have noticed, that every time you restart or stop/start your EC2 instance - you get a new public IP address. When you want to associate your domain name - it is better to have a static IP address that does not change after reboot. Elastic IP is the solution for this problem

Assign an Elastic IP to Your Nginx Load Balancer (EC2 Instance)
Login to AWS Management Console: Go to the AWS EC2 Dashboard.

Allocate an Elastic IP:

In the EC2 dashboard, click on Elastic IPs from the left-side menu.
Click Allocate Elastic IP address.
Choose Amazon's pool of IPv4 addresses and click Allocate.
Associate Elastic IP with Nginx LB Server:

In the Elastic IP dashboard, select the IP address you just created.
Click Actions > Associate Elastic IP address.
In the Instance field, select your Nginx Load Balancer EC2 instance.
Click Associate.


Point FreeDNS Subdomain to Your Elastic IP:

Once you've chosen your subdomain (e.g., yourname.mooo.com), go to the DNS section in your FreeDNS dashboard.
Add an A Record pointing the subdomain to your Elastic IP from AWS.
Type: A
Name: yourname.mooo.com (or the subdomain you chose)
Destination: Your AWS Elastic IP for the Nginx Load Balancer.

Check that your Web Servers can be reached from your browser using new domain name using HTTP protocol - http://<your-domain-name.com>
in my case I have this
http://loadbalancernginx.chickenkiller.com/login.php

Configure Nginx to Recognize Your New Domain Name
SSH into your Nginx LB Server:

bash
Copy code
ssh -i your-key.pem ubuntu@your-elastic-ip

Configure Nginx to recognize your new domain name
Update your nginx.conf with server_name www.<your-domain-name.com> instead of server_name www.domain.com
```bash
sudo vi /etc/nginx/nginx.conf
```
and in our case we are going to have this

```plaintext
server_name loadbalancernginx.chickenkiller.com;
```

Test Nginx Configuration:

Test the Nginx configuration to ensure everything is correct:

```bash

sudo nginx -t
```
If the test is successful, reload Nginx:
```bash

sudo systemctl reload nginx
```

Make sure snapd service is active and running

```bash
sudo systemctl status snapd
```

Install certbot

sudo snap install --classic certbot

Request your certificate (just follow the certbot instructions - you will need to choose which domain you want your certificate to be issued for, domain name will be looked up from nginx.conf file so make sure you have updated as done in the previous steps.)

sudo ln -s /snap/bin/certbot /usr/bin/certbot
sudo certbot --nginx

Test secured access to your Web Solution by trying to reach https://<your-domain-name.com> which in our case is https://loadbalancernginx.chickenkiller.com


You shall be able to access your website by using HTTPS protocol (that uses TCP port 443) and see a padlock pictogram in your browser's search string.

Click on the padlock icon and you can see the details of the certificate issued for your website.


Set up periodical renewal of your SSL/TLS certificate
By default, LetsEncrypt certificate is valid for 90 days, so it is recommended to renew it at least every 60 days or more frequently.

You can test renewal command in dry-run mode

sudo certbot renew --dry-run

et Up Automatic Renewal:

Ensure your SSL certificate renews automatically by setting up a cron job:

```bash
 crontab -e
```
You'll see a list of available editors. Since we are looking for the easiest option, choose 1 for nano (the easiest text editor to use):
```bash
Choose 1-4 [1]: 1
```

Add the following line to run the renewal process twice a day:
```bash

* */12 * * *   /usr/bin/certbot renew > /dev/null 2>&1


Congratulations!
You have just implemented an Nginx Load Balancing Web Solution with secured HTTPS connection with periodically updated SSL/TLS certificates.

